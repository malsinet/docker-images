#+TITLE: Docker Images
#+AUTHOR: Martín Alsinet
#+DATE: 2017
#+OPTIONS: toc:nil ':t num:nil
#+LANGUAGE: es
#+PROPERTY: header-args:sh :exports code :padline no :results output drawer :mkdirp yes
#+PROPERTY: header-args:dockerfile :exports code :padline no :mkdirp yes

* Motivación

El objetivo de este documento es detallar las imágenes de Docker personalizadas que utilizo y centralizar los scripts para generarlas en un solo archivo en el que además se pueda documentar qué componentes tiene cada imagen.

Mi editor es [[https://www.gnu.org/software/emacs/][emacs]], y eso me permite generar los dockerfiles directamente desde este documento, gracias a las facilidades de *org-mode*. En caso de no utilizar emacs, se puede consultar el código del dockerfile deseado y luego copiar-y-pegar el código en un archivo para generar la imagen correspondiente.

Una ventaja de tener herramientas dockerizadas (p.ej. como composer o npm) es que es posible ejecutarlas dentro de un contenedor efímero (=--rm=) y de esta manera tener los comandos disponibles sin necesidad instalar nada en el sistema local. Todas las dependencias quedan completamente aisladas dentro de la imagen. Cada vez que se ejecuta el comando se crea un contenedor, se ejecuta el comando dentro del contenedor montando el directorio actual, y cuando termina la ejecución se borra el contenedor. Con este documento también se pueden generar los scripts para utilizar los comandos dockerizados de esta manera, que se guardan en =~/bin=.

* Procedimiento
** Paso 1: Generar carpeta build

Lo primero que debemos hacer es generar la carpeta =build=, que es donde se depositarán los distintos dockerfiles. Para hacerlo hay que ejecutar el siguiente bloque de código con =C-c C-c=.

#+BEGIN_SRC sh
rm -Rf ./build
mkdir  ./build
ls -lah ./build
#+END_SRC

** Paso 2: Generar dockerfiles y comandos

Para generar todos los dockerfiles se debe ejecutar el comando =(M-x org-babel-tangle)=. Este comando busca todos los bloques de código del documento y extrae el código fuente de cada bloque en su archivo Dockerfile correspondiente dentro de la carpeta =./build=. 

Una vez generados los dockerfiles se puede generar la imagen deseada ingresando en la carpeta correspondiente (p.ej., =cd ./build/php/version-5.6=) y ejecutando el comando *docker build* (p.ej., =docker build malsinet/php:5.6-apache .=). Dado que el código fuente de los dockerfiles se encuentra en este documento, la carpeta build se utiliza como almacenamiento temporal para construir las imágenes y está incluida en el =.gitignore= del repositorio. 

Usando el comando *org-babel-tangle* se pueden regenerar los dockerfiles cada vez que sea necesario, manteniendo las fuentes en el documento junto con su documentación.

Además de los dockerfiles, en la carpeta =./build/bin= se generan varios scripts para utilizar las herramientas que proporcionan las imágenes sin instalar nada en la máquina local, ejecutando cada comando directamente desde la imagen.

** Paso 3: Copiar comandos dockerizados a ~/bin

Finalmente copiamos los comandos a la carpeta =~/bin= de modo que queden disponibles para su uso, ejecutando el siguiente bloque de código con =C-c C-c=.

#+BEGIN_SRC sh
chmod +x ./build/bin/*
mkdir -p ~/bin
cp ./build/bin/* ~/bin
ls -alh ~/bin
#+END_SRC

* Imágenes
** Lenguajes de programación
*** php

Las imágenes de PHP se generan a partir de las imágenes oficiales, a las que les hago las siguientes modificaciones:

- apache :: =mod_rewrite= activado
- $PATH :: se agrega =/var/www/vendor/bin= (carpeta con comandos instalados por composer)
- bash :: se crea un alias para ll y se configura la variable de entorno =$SHELL=
- extensiones de PHP :: se instalan las siguientes extensiones
  + =pdo=
  + =pdo_mysql=
  + =pdo_pgsql=

**** 5.6

#+BEGIN_SRC dockerfile :tangle build/php/5.6/Dockerfile
FROM php:5.6-apache
MAINTAINER Martin Alsinet <martin@alsinet>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash
ENV PATH=$PATH:/var/www/vendor/bin

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

**** 7.1

#+BEGIN_SRC dockerfile :tangle build/php/7.1/Dockerfile
FROM php:7.1-apache
MAINTAINER Martin Alsinet <martin@alsinet>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash
ENV PATH=$PATH:/var/www/vendor/bin

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

**** 7.2

#+BEGIN_SRC dockerfile :tangle build/php/7.2/Dockerfile
FROM php:7.2-apache
MAINTAINER Martin Alsinet <martin@alsinet>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash
ENV PATH=$PATH:/var/www/vendor/bin

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

**** 7.3

#+BEGIN_SRC dockerfile :tangle build/php/7.3/Dockerfile
FROM php:7.3-apache
MAINTAINER Martin Alsinet <martin@alsinet>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash
ENV PATH=$PATH:/var/www/vendor/bin

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

**** composer

#+BEGIN_SRC dockerfile :tangle build/php/composer/Dockerfile
FROM composer:1.8
MAINTAINER Martin Alsinet <martin@alsinet>

WORKDIR /app

CMD ["composer"]
#+END_SRC

*** python

Las imágenes de python se crean a partir de las imágenes oficiales, con los siguientes agregados:

- pip :: actualización a la última versión disponible
- virtualenv :: entornos de python aislados del python del sistema
- bash :: se crea un alias para ll y se configura la variable de entorno =$SHELL=

**** 2.7

#+BEGIN_SRC dockerfile :tangle build/python/2.7/Dockerfile
FROM python:2.7
MAINTAINER Martin Alsinet <martin@alsinet>

RUN pip install --upgrade pip
RUN pip install virtualenv
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash

WORKDIR /app

CMD ["/bin/bash"]
#+END_SRC

**** 3.6

#+BEGIN_SRC dockerfile :tangle build/python/3.6/Dockerfile
FROM python:3.6
MAINTAINER Martin Alsinet <martin@alsinet>

RUN pip install --upgrade pip
RUN pip install virtualenv
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash

WORKDIR /app

CMD ["/bin/bash"]
#+END_SRC

**** 3.7

#+BEGIN_SRC dockerfile :tangle build/python/3.7/Dockerfile
FROM python:3.7
MAINTAINER Martin Alsinet <martin@alsinet>

RUN pip install --upgrade pip
RUN pip install virtualenv
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc
ENV SHELL=/bin/bash

WORKDIR /app

CMD ["/bin/bash"]
#+END_SRC

*** node

- =$PATH= :: Se agrega la carpeta =/app/node_modules/.bin= al PATH de la imagen

Cuando se instalan paquetes con =npm install=, a veces se desea instalar comandos de consola, que se mantienen en la carpeta =./node_modules/.bin=. Mis [[Comandos Dockerizados][comandos dockerizados]] para npm y node montan la carpeta desde donde se lanza el comando como =/app= dentro del contenedor. Por lo tanto, si agrego la carpeta =/app/node_modules/.bin= al PATH de la imagen, en los contenedores de node siempre van a estar disponibles los comandos de consola que se instalen con =npm install= sin necesidad de indicar el path absoluto del comando.

**** Versión 11

#+BEGIN_SRC dockerfile :tangle build/node/11/Dockerfile
FROM node:11-stretch
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
ENV PATH=$PATH:/app/node_modules/.bin
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["npm", "start"]
#+END_SRC

**** Versión 10

#+BEGIN_SRC dockerfile :tangle build/node/10/Dockerfile
FROM node:10-jessie
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
ENV PATH=$PATH:/app/node_modules/.bin
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["npm", "start"]
#+END_SRC

*** java
**** 7-jre

#+BEGIN_SRC dockerfile :tangle build/java/7-jre/Dockerfile
FROM openjdk:7-jre
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

**** 7-jdk

#+BEGIN_SRC dockerfile :tangle build/java/7-jdk/Dockerfile
FROM openjdk:7-jdk
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

**** 8-jre

#+BEGIN_SRC dockerfile :tangle build/java/8-jre/Dockerfile
FROM openjdk:8-jre
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

**** 8-jdk

#+BEGIN_SRC dockerfile :tangle build/java/8-jdk/Dockerfile
FROM openjdk:8-jdk
MAINTAINER Martin Alsinet <martin@alsinet>

ENV SHELL=/bin/bash
RUN echo "alias ll='ls -alhG'" >> /root/.bashrc

WORKDIR /app

CMD ["java"]
#+END_SRC

*** lisps

Instalé cuatro implementaciones de Scheme y tres de Lisp en la misma imagen:

**** Scheme

- MIT Scheme :: https://www.gnu.org/software/mit-scheme/
- Guile :: https://www.gnu.org/software/guile/
- Racket :: https://racket-lang.org
- Chez :: https://cisco.github.io/ChezScheme/

***** Nota: Chicken Scheme

Intenté usar Chicken Scheme (https://www.call-cc.org), pero la instalación me resultó bastante compleja y engorrosa. Si bien el paquete básico se instala fácilmente, Emacs utiliza un REPL para scheme (Geiser) que requiere descargar, compilar e instalar muchos módulos adicionales.

=M-x describe-variable geiser-chicken--required-modules=

- chicken-doc
- apropos
- data-structures
- extras
- ports
- posix
- srfi-1
- srfi-13
- srfi-14
- srfi-18
- srfi-69
- tcp
- utils

**** Lisp

- PicoLisp :: https://picolisp.com/wiki/?home 
- NewLisp :: http://www.newlisp.org/
- SBCL :: http://sbcl.org/

**** Dockerfile

#+BEGIN_SRC dockerfile :tangle build/lisps/Dockerfile
FROM debian:testing

MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update
RUN apt-get install -y curl git

# install schemes
RUN apt-get install -y mit-scheme
RUN apt-get install -y guile-2.2-dev guile-2.2 libgcrypt20-dev libbz2-dev libsqlite3-dev autopoint
RUN apt-get install -y racket libedit-dev

# install lisps
RUN apt-get install -y picolisp 
RUN apt-get install -y newlisp 
RUN apt-get install -y sbcl sbcl-doc sbcl-source
RUN apt-get install -y slime

# build chez scheme
WORKDIR /tmp
RUN apt-get install -y build-essential libncurses5-dev libx11-dev uuid-dev
RUN git clone https://github.com/cisco/ChezScheme.git
RUN cd ChezScheme && ./configure --installschemename=chez-scheme --installpetitename=petite-chez && make install
RUN rm -Rf /tmp/ChezScheme

# clean up
RUN apt-get autoremove
RUN apt-get autoclean

#+END_SRC

** Utilidades
*** texlive

Esta imagen es enorme, pesa más de 4GB, y por lo tanto crearla tarda un buen rato. Tengo que buscar una distribución más liviana. Una opción a evaluar es [[https://yihui.name/tinytex/][TinyTeX]], para verificar si es posible usarla con org-mode, lo que reduciría enormemente el espacio en disco necesario.

#+BEGIN_SRC dockerfile :tangle build/texlive/Dockerfile
FROM ubuntu:xenial
MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q
RUN apt-get install -y texlive-full gnuplot python-pygments
RUN apt-get clean
RUN rm -rf /var/lib/apt/lists/*
#+END_SRC

*** Jupyter Notebook

Jupyter Notebook es un entorno para Literate Programming, que permite escribir documentos con Markdown intercalado con bloques de texto que se ejecutan directamente dentro del documento.

El soporte original de lenguajes de programación para Jupyter es Python, pero se pueden agregar motores para que soporte otros lenguajes de programación. En este caso le agrego soporte para ejecutar Javascript mediante nodejs.

Basándonos en la imagen de python3.6 que ya tenemos construida instalamos además [[https://tuananh.org/2015/06/16/how-to-install-zeromq-on-ubuntu/][ZeroMQ]], [[https://nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions][nodejs]] y [[https://github.com/notablemind/jupyter-nodejs][Jupyter-nodejs]], que nos permite ejecutar código javascript dentro de Jupyter.

#+BEGIN_SRC dockerfile :tangle build/jupyter/Dockerfile
FROM malsinet/python:3.6
MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q
RUN apt-get install -y libtool pkg-config build-essential autoconf automake
RUN apt-get install -y libzmq-dev curl
RUN curl -sL https://deb.nodesource.com/setup_6.x | bash -
RUN apt-get install -y nodejs
RUN pip3 install jupyter
WORKDIR "/tmp"
RUN git clone https://github.com/notablemind/jupyter-nodejs.git
WORKDIR "/tmp/jupyter-nodejs"
RUN mkdir -p /root/.ipython/kernels/nodejs/
RUN npm install && node install.js
RUN npm run build
RUN npm run build-ext
RUN apt-get clean && rm -rf /var/lib/apt/lists/*

CMD ["jupyter", "notebook", "--ip=0.0.0.0", "--allow-root"]
#+END_SRC

**** TODO revisar nuevas imágenes de docker para jupyter

- https://jupyter-docker-stacks.readthedocs.io/en/latest/using/selecting.html

- https://github.com/jupyter/docker-stacks

Sería bueno tener una imagen mínima con distintos lenguajes de programación (Literate Programming) y otra con las bibliotecas para data science.

*** Eve

#+BEGIN_SRC dockerfile :tangle build/eve/Dockerfile
FROM malsinet/node:8.9
MAINTAINER Martin Alsinet <martin@alsinet>

ENV DEBIAN_FRONTEND noninteractive

WORKDIR "/app"
RUN git clone https://github.com/witheve/Eve.git
WORKDIR "/app/Eve"
RUN git checkout 0.2
RUN npm install --unsafe-perm

CMD ["npm", "start"]
#+END_SRC

* Comandos Dockerizados

Estos comandos permiten utilizar las distintas herramientas sin "contaminar" la máquina local con la instalación de cientos de paquetes, como sucede, por ejemplo, cuando se instala python, php o nodejs con todas sus dependencias. Esto se logra con un script "lanzador" que ejecuta la utilidad dentro de un contenedor efímero (~docker run --rm~), que se borra luego de cada ejecución del comando. Todas las dependencias y paquetes quedan dentro de la imagen correspondiente.

Hay algunos trucos para lograr una integración completa con el entorno, a saber:

- Montar la carpeta =~/.ssh= :: Esto se hace para copiar dentro del contenedor la configuración local de ssh (claves públicas y hosts), que sirve por ejemplo cuando el contenedor accede a repositorios privados en github o bitbucket

- Montar la carpeta =/private/var/folders= :: En Mac OS X se utiliza la carpeta =/private/var/folders= como destino de los archivos y carpetas temporales

- Montar la carpeta desde donde se lanza el comando como =/app= :: Esto permite, por ejemplo, ejecutar =composer install= o =npm install= desde la carpeta de nuestro proyecto

** composer

Para ejecutar composer se agrega la opción =-t= que permite cancelar el comando con =Ctrl-C=. Además se monta la carpeta =~/.composer= donde se guarda el cache de paquetes de la aplicación. Si no se monta esta carpeta, cada vez que se ejecuta el comando se deben descargar más de 10MB solamente del listado de paquetes disponibles.

#+BEGIN_SRC sh :tangle build/bin/composer
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -t \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v ~/.composer:/tmp/cache \
           malsinet/composer $@
#+END_SRC

** php
*** 5.6

#+BEGIN_SRC sh :tangle build/bin/php-5.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/php:5.6-apache \
           php "$@"
#+END_SRC

*** 7.1

#+BEGIN_SRC sh :tangle build/bin/php-7.1
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/php:7.1-apache \
           php "$@"
#+END_SRC

*** 7.2

#+BEGIN_SRC sh :tangle build/bin/php-7.2
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/php:7.2-apache \
           php "$@"
#+END_SRC

*** 7.3

#+BEGIN_SRC sh :tangle build/bin/php-7.3
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/php:7.3-apache \
           php "$@"
#+END_SRC

** python

Anteriormente usaba la variable de entorno =PYTHONPATH= para agregar una carpeta =/app/vendor= al path de python, en donde descargaba las dependencias usando =pip install -t /app/vendor= y podía ejecutar una aplicación cargando las dependencias desde los archivos locales ya descargados.

En versiones más recientes de python se modificó el comportamiento de la resolución de librerías, y ya no funciona esa manera de hacer las cosas. Tuve que modificar mis comandos para que detecten si existe un virtualenv creado en la carpeta desde donde se está lanzando el comando (por convención se busca siempre la carpeta =./venv=). Si hay un virtualenv, usamos el python o el pip que están dentro del virtualenv (que siempre van a estar en =/app/venv/bin=), caso contrario usamos los comandos por defecto.

De todos modos, creo que esta es la mejor manera de ejecutar una aplicación, usando las herramientas recomendadas por la comunidad de python. Lo que hacía antes era un hack que, si bien funcionaba, era algo bastante rebuscado.

*** 2.7
**** python-3.6

#+BEGIN_SRC sh :tangle build/bin/python-2.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

ENV_PYTHON=./venv/bin/python
if [ -x "$ENV_PYTHON" ]; then
    PYTHON="/app/venv/bin/python"
else 
    PYTHON="python"
fi 

docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:2.7 $PYTHON "$@"
#+END_SRC

**** pip-2.7

#+BEGIN_SRC sh :tangle build/bin/pip-2.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

ENV_PIP=./venv/bin/pip
if [ -x "$ENV_PIP" ]; then
    PIP="/app/venv/bin/pip"
else 
    PIP="pip"
fi 

docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:2.7 $PIP $@
#+END_SRC
**** virtualenv-2.7

#+BEGIN_SRC sh :tangle build/bin/virtualenv-2.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:2.7 virtualenv $@
#+END_SRC

*** 3.6
**** python-3.6

#+BEGIN_SRC sh :tangle build/bin/python-3.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

ENV_PYTHON=./venv/bin/python
if [ -x "$ENV_PYTHON" ]; then
    PYTHON="/app/venv/bin/python"
else 
    PYTHON="python3"
fi 

docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.6 $PYTHON "$@"
#+END_SRC

**** pip-3.6

#+BEGIN_SRC sh :tangle build/bin/pip-3.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

ENV_PIP=./venv/bin/pip
if [ -x "$ENV_PIP" ]; then
    PIP="/app/venv/bin/pip"
else 
    PIP="pip"
fi 

docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.6 $PIP $@
#+END_SRC
**** virtualenv-3.6

#+BEGIN_SRC sh :tangle build/bin/virtualenv-3.6
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.6 virtualenv $@
#+END_SRC

*** 3.7
**** python-3.7

#+BEGIN_SRC sh :tangle build/bin/python-3.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

ENV_PYTHON=./venv/bin/python
if [ -x "$ENV_PYTHON" ]; then
    PYTHON="/app/venv/bin/python"
else 
    PYTHON="python3"
fi 

docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.7 $PYTHON "$@"
#+END_SRC

**** pip-3.7

#+BEGIN_SRC sh :tangle build/bin/pip-3.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

ENV_PIP=./venv/bin/pip
if [ -x "$ENV_PIP" ]; then
    PIP="/app/venv/bin/pip"
else 
    PIP="pip"
fi 

docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.7 $PIP $@
#+END_SRC

**** virtualenv-3.7

#+BEGIN_SRC sh :tangle build/bin/virtualenv-3.7
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.7 virtualenv $@
#+END_SRC

*** pytest

#+BEGIN_SRC sh :tangle build/bin/pytest
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin

ENV_PYTEST=./venv/bin/pytest
if [ ! -x "$ENV_PYTEST" ]; then
    echo "Pytest does not seem to be installed in ./venv/ virtualenv \n"
    echo "\n"
    exit
else 
    PYTEST="/app/venv/bin/pytest"
fi 

docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           malsinet/python:3.6 $PYTEST $@
#+END_SRC

** java
*** java-7-jre

#+BEGIN_SRC sh :tangle build/bin/java-7-jre
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:7-jre java $@
#+END_SRC

*** java-7-jdk

#+BEGIN_SRC sh :tangle build/bin/java-7-jdk
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:7-jdk java $@
#+END_SRC

*** java-8-jre

#+BEGIN_SRC sh :tangle build/bin/java-8-jre
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:8-jre java $@
#+END_SRC

*** java-8-jdk

#+BEGIN_SRC sh :tangle build/bin/java-8-jdk
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           malsinet/java:8-jdk java $@
#+END_SRC

** node
*** 10
**** yarn

#+BEGIN_SRC sh :tangle build/bin/yarn-10
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 3000:3000 \
           -p 8080:8080 \
           malsinet/node:10 \
           yarn $@
#+END_SRC

**** npm

#+BEGIN_SRC sh :tangle build/bin/npm-10
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 3000:3000 \
           -p 8080:8080 \
           malsinet/node:10 \
           npm $@
#+END_SRC

**** node

#+BEGIN_SRC sh :tangle build/bin/node-10
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 3000:3000 \
           -p 8080:8080 \
           malsinet/node:10 \
           node "$@"
#+END_SRC

*** 11
**** yarn

#+BEGIN_SRC sh :tangle build/bin/yarn-11
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 3000:3000 \
           -p 8080:8080 \
           malsinet/node:11 \
           yarn $@
#+END_SRC

**** npm

#+BEGIN_SRC sh :tangle build/bin/npm-11
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 3000:3000 \
           -p 8080:8080 \
           malsinet/node:11 \
           npm $@
#+END_SRC

**** node

#+BEGIN_SRC sh :tangle build/bin/node-11
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):/app \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -e "NODE_PATH=/app/node_modules" \
           -p 3000:3000 \
           -p 8080:8080 \
           malsinet/node:11 \
           node "$@"
#+END_SRC

** lisps
*** Problemas encontrados (y solucionados)

Mi objetivo era usar intérpretes de Scheme desde Emacs con Org-mode para Literate Programming. Por lo tanto, necesitaba poder lanzar el intérprete desde dentro de Emacs y que Emacs pudiera enviarle comandos en una sesión REPL.

Me costó bastante lograrlo, pero finalmente pude hacer que Emacs use los runtimes dockerizados. Emacs utiliza [[http://geiser.nongnu.org][Geiser]] como REPL, pero cuando hacía =M-x run-geiser= todos los intérpretes fallaban con errores del tipo =mit-scheme exited with error(1)=.

Solucioné los siguientes problemas:

**** Cambio de $@ por "$@"

Primero me di cuenta de que si ejecutaba un bloque de código desde la consola, los comandos dockerizados no retornaban el valor correcto. Por ejemplo, al ejecutar =racket -e "(+ 1 2 3)"= , mi comando dockerizado no devolvía nada, y pasaba lo mismo con el resto de los intérpretes (mit, guile, chicken). Sin embargo, al hacer lo mismo con un scheme instalado nativamente en mi máquina, sí funcionaba correctamente.

Luego de hacer algunas pruebas me di cuenta de que el problema era el script en bash que lanza el comando, que no estaba pasando el bloque de código como un string, sino que lo enviaba como una lista de parámetros (=racket -e + 1 2 3=). Eso hacía fallar el comando porque los argumentos sueltos no tienen sentido. Eventualmente encontré [[https://stackoverflow.com/questions/17094086/passing-arguments-with-spaces-between-bash-script][esta pregunta de StackOverflow]] y corregí el error en el script, que consistía en pasarle los parámetros así: ="$@"= , en vez de así: =$@=.

Corregido este problema, ya pude ejecutar desde consola un bloque de código y que el comando dockerizado me devuelva el resultado correcto.

#+BEGIN_SRC sh :results output drawer
racket -e "(+ 1 2 3)"
#+END_SRC

**** Cambio de -ti por -i

Ahora ya podía ejecutar el código como un string desde consola, pero aparentemente Geiser no ejecuta el código scheme enviándolo como un string sino que lo envía por STDIN, algo así como =cat /tmp/scheme-file-123.scm | guile=. Nuevamente, me llevó un rato darme cuenta de qué era lo que tenía que corregir, pero finalmente se me prendió la lamparita y cambié el =docker run --rm -ti= que lanza el intérprete por =docker run --rm -i ...=. 

La opción =-t= hace que docker lance comando en una pseudo TTY, lo cual interfiere con la ejecución del código scheme desde Geiser.

La opción =-i= le transfiere el STDIN del host al STDIN del comando ejecutado dentro del contenedor. Ésta es la opción que necesitaba para el comando.

Una ventaja adicional fue que este cambio me ayudó también a corregir el funcionamiento de los comandos dockerizados para python, node y php, que tenían el mismo problema.

**** Montar /Users/martin como volumen

Geiser carga algunos archivos desde la carpeta =~/.emacs.d/elpa/geiser-xxx/scheme/= para inicializar el REPL. Obviamente esta carpeta no se encuentra disponible adentro del contenedor, y por lo tanto, cuando lanzaba =M-x run-geiser= me daba un error porque no encontraba los archivos .scm.

Para corregir ese error hice que el comando monte la carpeta =/Users= como un volumen dentro del contenedor.

#+BEGIN_SRC sh :results output drawer
ls -al ~/.emacs.d/elpa/geiser-*/scheme
#+END_SRC

#+RESULTS:
:results:
total 0
drwxr-xr-x   8 martin  staff   256 Jan 14 16:20 .
drwxr-xr-x  71 martin  staff  2272 Jan 14 16:20 ..
drwxr-xr-x   3 martin  staff    96 Jan 14 16:20 chez
drwxr-xr-x   3 martin  staff    96 Jan 14 16:20 chibi
drwxr-xr-x   3 martin  staff    96 Jan 14 16:20 chicken
drwxr-xr-x   3 martin  staff    96 Jan 14 16:20 guile
drwxr-xr-x   3 martin  staff    96 Jan 14 16:20 mit
drwxr-xr-x   3 martin  staff    96 Jan 14 16:20 racket
:end:

*** MIT Scheme

#+BEGIN_SRC sh :tangle build/bin/mit-scheme
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
       -v /Users:/Users \
       -v $(pwd):/app \
       -v ~/.ssh:/root/.ssh \
       -v /private/var/folders:/var/folders \
       malsinet/lisps \
       mit-scheme "$@"
#+END_SRC

*** Guile Scheme

#+BEGIN_SRC sh :tangle build/bin/guile
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
       -v /Users:/Users \
       -v $(pwd):/app \
       -v ~/.ssh:/root/.ssh \
       -v /private/var/folders:/var/folders \
       malsinet/lisps \
       guile "$@"
#+END_SRC

*** Racket

#+BEGIN_SRC sh :tangle build/bin/racket
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
       -v /Users:/Users \
       -v $(pwd):/app \
       -v ~/.ssh:/root/.ssh \
       -v /private/var/folders:/var/folders \
       malsinet/lisps \
       racket "$@"
#+END_SRC

*** picolisp

#+BEGIN_SRC sh :tangle build/bin/picolisp
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
       -v /Users:/Users \
       -v $(pwd):/app \
       -v ~/.ssh:/root/.ssh \
       -v /private/var/folders:/var/folders \
       malsinet/lisps \
       picolisp "$@"
#+END_SRC

*** newlisp

#+BEGIN_SRC sh :tangle build/bin/newlisp
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
       -v /Users:/Users \
       -v $(pwd):/app \
       -v ~/.ssh:/root/.ssh \
       -v /private/var/folders:/var/folders \
       malsinet/lisps \
       newlisp "$@"
#+END_SRC

*** sbcl

#+BEGIN_SRC sh :tangle build/bin/sbcl
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
       -v /Users:/Users \
       -v $(pwd):/app \
       -v ~/.ssh:/root/.ssh \
       -v /private/var/folders:/var/folders \
       malsinet/lisps \
       sbcl "$@"
#+END_SRC

*** slime

#+BEGIN_SRC sh :tangle build/bin/slime
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -i \
       -v /Users:/Users \
       -v $(pwd):/app \
       -v ~/.ssh:/root/.ssh \
       -v /private/var/folders:/var/folders \
       malsinet/lisps \
       slime "$@"
#+END_SRC

** pdflatex

#+BEGIN_SRC sh :tangle build/bin/pdflatex
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
           -v $(pwd):$(pwd) \
           -v ~/.ssh:/root/.ssh \
           -v /private/var/folders:/var/folders \
           -w $(pwd) \
           malsinet/latex \
           pdflatex $@
rm *.log *.aux 
rm -f *.ent
rm -Rf _minted-*
#+END_SRC

** gnuplot

#+BEGIN_SRC sh :tangle build/bin/gnuplot
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm \
       -v $(pwd):$(pwd) \
       -v ~/.ssh:/root/.ssh \
       -w $(pwd) \
       malsinet/latex \
       gnuplot $@
#+END_SRC

** jupyter

#+BEGIN_SRC sh :tangle build/bin/jupyter
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -ti \
       -p 8888:8888 \
       -v $(pwd):/app \
       -w /app \
       malsinet/jupyter \
       jupyter notebook --ip=0.0.0.0 --allow-root
#+END_SRC

** eve

#+BEGIN_SRC sh :tangle build/bin/eve
#!/bin/sh
export PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin
docker run --rm -ti \
           -p 8080:8080 \
           malsinet/eve
#+END_SRC
