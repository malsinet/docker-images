
#+TITLE: Docker Image Repository
#+AUTHOR: Martín Alsinet
#+DATE: 2017

* Resumen

El objetivo de este documento es detallar las imágenes de Docker personalizadas que utilizo y centralizar los scripts en un solo lugar donde se pueda explicar en detalle qué componentes tiene cada imagen y que sirva además para generar los dockerfiles necesarios.

** Quickstart
*** Paso 1: Generar carpetas

Lo primero que debemos hacer es generar la estructura de carpetas en donde se colocarán los distintos dockerfiles. Para hacerlo hay que ejecutar el siguiente bloque de código con =C-c C-c=.

#+BEGIN_SRC sh

rm -Rf ./build
mkdir -p ./build/php/5-6 ./build/php/7
mkdir -p ./build/python/2.7
mkdir -p ./build/node
mkdir -p ./build/mit-scheme
mkdir -p ./build/postgres
mkdir -p ./build/pgadmin4
mkdir -p ./build/mysql
mkdir -p ./build/phpmyadmin
mkdir -p ./build/texlive

#+END_SRC

#+RESULTS:

*** Paso 2: Generar dockerfiles

Para generar todos los dockerfiles se debe ejecutar el comando =(M-x org-babel-tangle)=. Este comando cicla por todos los bloques de código de este documento y extrae el código fuente de cada bloque en su archivo Dockerfile correspondiente dentro de la carpeta =./build=. 

Una vez generados los dockerfiles se puede entrar en la carpeta deseada (p.ej., =cd ./build/php/5-6=) y ejecutar el comando =docker build malsinet/php:5.6-apache .= para generar la imagen. Dado que el código fuente de los dockerfiles se encuentra en este documento, la carpeta build se utiliza como almacenamiento temporal para construir las imágenes y está en el =.gitignore= del repositorio. Con el comando *org-babel-tangle* se pueden regenerar los dockerfiles cada vez que sea necesario, manteniendo las fuentes en el documento para que se entienda mejor.

* Lenguajes de programación
** php

Las imágenes de PHP se generan a partir de las oficiales, a las que les agrego las siguientes extensiones:

- pdo
- pdo_mysql
- pdo_pgsql
- xdebug

*** version-5.6

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/php/5-6/Dockerfile
FROM php:5.6-apache
MAINTAINER Martin Alsinet <martin>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql xdebug

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

*** version-7

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/php/7/Dockerfile
FROM php:7-apache
MAINTAINER Martin Alsinet <martin>

RUN apt-get update
RUN apt-get install -y libpq-dev
RUN a2enmod rewrite
RUN docker-php-ext-install pdo pdo_mysql pdo_pgsql

WORKDIR /var/www/html

EXPOSE 80
CMD ["apache2-foreground"]
#+END_SRC

** python
*** version-2.7
*** version-3.6
** node
** mit-scheme

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/mit-scheme/Dockerfile
FROM debian:8.3

MAINTAINER Martin Alsinet <martin>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update && \
    apt-get install -y mit-scheme

ENTRYPOINT ["mit-scheme"]
#+END_SRC

* Bases de datos
** postgres
** pgadmin4
** mysql
** phpmyadmin
* Utilidades
** texlive

#+BEGIN_SRC dockerfile :exports code :padline no :tangle build/texlive/Dockerfile
FROM ubuntu:xenial
MAINTAINER Martin Alsinet <martin>

ENV DEBIAN_FRONTEND noninteractive

RUN apt-get update -q && \
    apt-get install -y texlive-full \
    gnuplot && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*
#+END_SRC

